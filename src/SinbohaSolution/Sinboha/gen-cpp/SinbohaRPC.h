/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SinbohaRPC_H
#define SinbohaRPC_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "sinboha_types.h"

namespace SINBOHA_NET {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SinbohaRPCIf {
 public:
  virtual ~SinbohaRPCIf() {}
  virtual bool CanYouActivateMe(const int64_t ChangeTime, const int16_t Status) = 0;
};

class SinbohaRPCIfFactory {
 public:
  typedef SinbohaRPCIf Handler;

  virtual ~SinbohaRPCIfFactory() {}

  virtual SinbohaRPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SinbohaRPCIf* /* handler */) = 0;
};

class SinbohaRPCIfSingletonFactory : virtual public SinbohaRPCIfFactory {
 public:
  SinbohaRPCIfSingletonFactory(const boost::shared_ptr<SinbohaRPCIf>& iface) : iface_(iface) {}
  virtual ~SinbohaRPCIfSingletonFactory() {}

  virtual SinbohaRPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SinbohaRPCIf* /* handler */) {}

 protected:
  boost::shared_ptr<SinbohaRPCIf> iface_;
};

class SinbohaRPCNull : virtual public SinbohaRPCIf {
 public:
  virtual ~SinbohaRPCNull() {}
  bool CanYouActivateMe(const int64_t /* ChangeTime */, const int16_t /* Status */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _SinbohaRPC_CanYouActivateMe_args__isset {
  _SinbohaRPC_CanYouActivateMe_args__isset() : ChangeTime(false), Status(false) {}
  bool ChangeTime :1;
  bool Status :1;
} _SinbohaRPC_CanYouActivateMe_args__isset;

class SinbohaRPC_CanYouActivateMe_args {
 public:

  SinbohaRPC_CanYouActivateMe_args(const SinbohaRPC_CanYouActivateMe_args&);
  SinbohaRPC_CanYouActivateMe_args& operator=(const SinbohaRPC_CanYouActivateMe_args&);
  SinbohaRPC_CanYouActivateMe_args() : ChangeTime(0), Status(0) {
  }

  virtual ~SinbohaRPC_CanYouActivateMe_args() throw();
  int64_t ChangeTime;
  int16_t Status;

  _SinbohaRPC_CanYouActivateMe_args__isset __isset;

  void __set_ChangeTime(const int64_t val);

  void __set_Status(const int16_t val);

  bool operator == (const SinbohaRPC_CanYouActivateMe_args & rhs) const
  {
    if (!(ChangeTime == rhs.ChangeTime))
      return false;
    if (!(Status == rhs.Status))
      return false;
    return true;
  }
  bool operator != (const SinbohaRPC_CanYouActivateMe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SinbohaRPC_CanYouActivateMe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SinbohaRPC_CanYouActivateMe_pargs {
 public:


  virtual ~SinbohaRPC_CanYouActivateMe_pargs() throw();
  const int64_t* ChangeTime;
  const int16_t* Status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SinbohaRPC_CanYouActivateMe_result__isset {
  _SinbohaRPC_CanYouActivateMe_result__isset() : success(false) {}
  bool success :1;
} _SinbohaRPC_CanYouActivateMe_result__isset;

class SinbohaRPC_CanYouActivateMe_result {
 public:

  SinbohaRPC_CanYouActivateMe_result(const SinbohaRPC_CanYouActivateMe_result&);
  SinbohaRPC_CanYouActivateMe_result& operator=(const SinbohaRPC_CanYouActivateMe_result&);
  SinbohaRPC_CanYouActivateMe_result() : success(0) {
  }

  virtual ~SinbohaRPC_CanYouActivateMe_result() throw();
  bool success;

  _SinbohaRPC_CanYouActivateMe_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SinbohaRPC_CanYouActivateMe_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SinbohaRPC_CanYouActivateMe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SinbohaRPC_CanYouActivateMe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SinbohaRPC_CanYouActivateMe_presult__isset {
  _SinbohaRPC_CanYouActivateMe_presult__isset() : success(false) {}
  bool success :1;
} _SinbohaRPC_CanYouActivateMe_presult__isset;

class SinbohaRPC_CanYouActivateMe_presult {
 public:


  virtual ~SinbohaRPC_CanYouActivateMe_presult() throw();
  bool* success;

  _SinbohaRPC_CanYouActivateMe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SinbohaRPCClient : virtual public SinbohaRPCIf {
 public:
  SinbohaRPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SinbohaRPCClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool CanYouActivateMe(const int64_t ChangeTime, const int16_t Status);
  void send_CanYouActivateMe(const int64_t ChangeTime, const int16_t Status);
  bool recv_CanYouActivateMe();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SinbohaRPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SinbohaRPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SinbohaRPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_CanYouActivateMe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SinbohaRPCProcessor(boost::shared_ptr<SinbohaRPCIf> iface) :
    iface_(iface) {
    processMap_["CanYouActivateMe"] = &SinbohaRPCProcessor::process_CanYouActivateMe;
  }

  virtual ~SinbohaRPCProcessor() {}
};

class SinbohaRPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SinbohaRPCProcessorFactory(const ::boost::shared_ptr< SinbohaRPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SinbohaRPCIfFactory > handlerFactory_;
};

class SinbohaRPCMultiface : virtual public SinbohaRPCIf {
 public:
  SinbohaRPCMultiface(std::vector<boost::shared_ptr<SinbohaRPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SinbohaRPCMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SinbohaRPCIf> > ifaces_;
  SinbohaRPCMultiface() {}
  void add(boost::shared_ptr<SinbohaRPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool CanYouActivateMe(const int64_t ChangeTime, const int16_t Status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CanYouActivateMe(ChangeTime, Status);
    }
    return ifaces_[i]->CanYouActivateMe(ChangeTime, Status);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SinbohaRPCConcurrentClient : virtual public SinbohaRPCIf {
 public:
  SinbohaRPCConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SinbohaRPCConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool CanYouActivateMe(const int64_t ChangeTime, const int16_t Status);
  int32_t send_CanYouActivateMe(const int64_t ChangeTime, const int16_t Status);
  bool recv_CanYouActivateMe(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
